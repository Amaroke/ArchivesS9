<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<org.eventb.core.machineFile org.eventb.core.configuration="org.eventb.core.fwd" org.eventb.core.generated="false" org.eventb.emf.persistence.emf_id="_-BF6j8pVEe6jL58QWlChbw" org.eventb.texttools.text_lastmodified="1707818107802" org.eventb.texttools.text_representation="machine Computing&#10;    refines PrePost&#10;    sees C0&#10;&#10;variables&#10;    r dd current  // Définition des variables utilisées dans l'algorithme.&#10;&#10;invariants&#10;    @inv1 r ∈ BOOL  // Le résultat r est un booléen.&#10;    @inv2 current ∈ ℕ  // current est un nombre naturel, que l'on parcourt.&#10;    @inv3 dd ∈ ℕ → ℙ(ℕ)  // dd est une fonction associant à chaque nombre naturel un ensemble de nombres naturels.&#10;    @inv4 ∀ iterator · iterator ∈ ℕ ∧ iterator ≤ current ⇒ dd(iterator) = d(iterator)  // La fonction dd est en accord avec la suite de diviseurs d définie dans le contexte.&#10;    @inv5 dom(dd) = 0‥current  // Le domaine de dd va de 0 à current.&#10;    @inv6 dom(dd) ⊆ 0‥n  // Le domaine de dd est inclus dans l'ensemble des nombres jusqu'à n.&#10;&#10;events&#10;    event INITIALISATION extends INITIALISATION&#10;    begin&#10;        @act2 current ≔ 0  // Initialisation de current à 0.&#10;        @act3 dd ≔ {0 ↦ ∅}  // Initialisation de dd avec un ensemble vide.&#10;    end&#10;&#10;    event computing refines computing&#10;    any&#10;        v  // Variable intermédiaire utilisée pour stocker le résultat intermédiaire.&#10;    where&#10;        @grd1 n ∈ dom(d)  // Vérifie que n est dans le domaine des diviseurs.&#10;        @grd2 v ∈ BOOL  // Vérifie que v est un booléen.&#10;        @grd3 dd(n) = {1, n} ⇒ v = FALSE  // Si dd(n) contient uniquement 1 et n, alors v est faux.&#10;        @grd4 dd(n) ≠ {1, n} ⇒ v = TRUE  // Sinon, v est vrai.&#10;    then&#10;        @act1 r ≔ bool(dd(n) = {1,n})  // Le résultat r est vrai si dd(n) contient uniquement 1 et n.&#10;    end&#10;&#10;    event step1  // Étape de mise à jour des diviseurs lorsque n n'est pas dans le domaine.&#10;    when&#10;        @grd1 n ∉ dom(dd)  // Vérifie que n n'est pas déjà dans le domaine de dd.&#10;        @grd2 n mod (current+1) = 0  // Vérifie si n est divisible par current+1.&#10;    then&#10;        @act1 dd(current+1) ≔ dd(current) ∪ {current+1}  // Met à jour dd en ajoutant current+1 aux diviseurs.&#10;        @act2 current ≔ current + 1  // Incrémente current.&#10;    end&#10;&#10;    event step2  // Étape de mise à jour des diviseurs lorsque n n'est pas dans le domaine et n n'est pas divisible par current+1.&#10;    when&#10;        @grd1 n ∉ dom(dd)  // Vérifie que n n'est pas déjà dans le domaine de dd.&#10;        @grd2 n mod (current+1) ≠ 0  // Vérifie si n n'est pas divisible par current+1.&#10;    then&#10;        @act1 dd(current+1) ≔ dd(current)  // Met à jour dd sans ajouter current+1 aux diviseurs.&#10;        @act2 current ≔ current + 1  // Incrémente current.&#10;    end&#10;&#10;end&#10;" version="5">
    <org.eventb.core.refinesMachine name="'" org.eventb.core.target="PrePost"/>
    <org.eventb.core.seesContext name="_wsqs0MgtEe67_pe46YZ-uQ" org.eventb.core.target="C0"/>
    <org.eventb.core.event name="_wsqs0MgtEe67_pe46YZ-uR" org.eventb.core.convergence="0" org.eventb.core.extended="true" org.eventb.core.generated="false" org.eventb.core.label="INITIALISATION" org.eventb.emf.persistence.emf_id="_-BF6e8pVEe6jL58QWlChbw">
        <org.eventb.core.action name="_pljmgMj5Ee6-Z9PCABxFkA" org.eventb.core.assignment="current ≔ 0" org.eventb.core.comment="Initialisation de current à 0." org.eventb.core.generated="false" org.eventb.core.label="act2" org.eventb.emf.persistence.emf_id="_-BF6ecpVEe6jL58QWlChbw"/>
        <org.eventb.core.action name="_-djr8MkAEe6Up_-2oojL3w" org.eventb.core.assignment="dd ≔ {0 ↦ ∅}" org.eventb.core.comment="Initialisation de dd avec un ensemble vide." org.eventb.core.generated="false" org.eventb.core.label="act3" org.eventb.emf.persistence.emf_id="_-BF6espVEe6jL58QWlChbw"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_wsqs0MgtEe67_pe46YZ-uS" org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="computing" org.eventb.emf.persistence.emf_id="_-BF6g8pVEe6jL58QWlChbw">
        <org.eventb.core.refinesEvent name="'" org.eventb.core.target="computing"/>
        <org.eventb.core.action name="_3NvzIcj8Ee6-Z9PCABxFkA" org.eventb.core.assignment="r ≔ bool(dd(n) = {1,n})" org.eventb.core.comment="Le résultat r est vrai si dd(n) contient uniquement 1 et n." org.eventb.core.generated="false" org.eventb.core.label="act1" org.eventb.emf.persistence.emf_id="_-BF6gspVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_3NulAMj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Vérifie que n est dans le domaine des diviseurs." org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="n ∈ dom(d)" org.eventb.emf.persistence.emf_id="_-BF6fspVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_3NvMEMj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Vérifie que v est un booléen." org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="v ∈ BOOL" org.eventb.emf.persistence.emf_id="_-BF6f8pVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_CrRJ4Mj-Ee6Up_-2oojL3w" org.eventb.core.comment="Si dd(n) contient uniquement 1 et n, alors v est faux." org.eventb.core.generated="false" org.eventb.core.label="grd3" org.eventb.core.predicate="dd(n) = {1, n} ⇒ v = FALSE" org.eventb.emf.persistence.emf_id="_-BF6gMpVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_JpFQkMj-Ee6Up_-2oojL3w" org.eventb.core.comment="Sinon, v est vrai." org.eventb.core.generated="false" org.eventb.core.label="grd4" org.eventb.core.predicate="dd(n) ≠ {1, n} ⇒ v = TRUE" org.eventb.emf.persistence.emf_id="_-BF6gcpVEe6jL58QWlChbw"/>
        <org.eventb.core.parameter name="_3NvMEcj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Variable intermédiaire utilisée pour stocker le résultat intermédiaire." org.eventb.core.generated="false" org.eventb.core.identifier="v" org.eventb.emf.persistence.emf_id="_-BF6fcpVEe6jL58QWlChbw"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_3NvzIMj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Étape de mise à jour des diviseurs lorsque n n'est pas dans le domaine." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="step1" org.eventb.emf.persistence.emf_id="_-BF6icpVEe6jL58QWlChbw">
        <org.eventb.core.action name="_3NxBQcj8Ee6-Z9PCABxFkA" org.eventb.core.assignment="dd(current+1) ≔ dd(current) ∪ {current+1}" org.eventb.core.comment="Met à jour dd en ajoutant current+1 aux diviseurs." org.eventb.core.generated="false" org.eventb.core.label="act1" org.eventb.emf.persistence.emf_id="_-BF6h8pVEe6jL58QWlChbw"/>
        <org.eventb.core.action name="_3NvzIsj8Ee6-Z9PCABxFkA" org.eventb.core.assignment="current ≔ current + 1" org.eventb.core.comment="Incrémente current." org.eventb.core.generated="false" org.eventb.core.label="act2" org.eventb.emf.persistence.emf_id="_-BF6iMpVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_3NwaMMj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Vérifie que n n'est pas déjà dans le domaine de dd." org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="n ∉ dom(dd)" org.eventb.emf.persistence.emf_id="_-BF6hcpVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_3NwaMcj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Vérifie si n est divisible par current+1." org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="n mod (current+1) = 0" org.eventb.emf.persistence.emf_id="_-BF6hspVEe6jL58QWlChbw"/>
    </org.eventb.core.event>
    <org.eventb.core.event name="_3NxBQMj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Étape de mise à jour des diviseurs lorsque n n'est pas dans le domaine et n n'est pas divisible par current+1." org.eventb.core.convergence="0" org.eventb.core.extended="false" org.eventb.core.generated="false" org.eventb.core.label="step2" org.eventb.emf.persistence.emf_id="_-BF6jspVEe6jL58QWlChbw">
        <org.eventb.core.action name="_5awAwMj9Ee6Up_-2oojL3w" org.eventb.core.assignment="dd(current+1) ≔ dd(current)" org.eventb.core.comment="Met à jour dd sans ajouter current+1 aux diviseurs." org.eventb.core.generated="false" org.eventb.core.label="act1" org.eventb.emf.persistence.emf_id="_-BF6jMpVEe6jL58QWlChbw"/>
        <org.eventb.core.action name="_zpY-wckAEe6Up_-2oojL3w" org.eventb.core.assignment="current ≔ current + 1" org.eventb.core.comment="Incrémente current." org.eventb.core.generated="false" org.eventb.core.label="act2" org.eventb.emf.persistence.emf_id="_-BF6jcpVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_3NxoUMj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Vérifie que n n'est pas déjà dans le domaine de dd." org.eventb.core.generated="false" org.eventb.core.label="grd1" org.eventb.core.predicate="n ∉ dom(dd)" org.eventb.emf.persistence.emf_id="_-BF6ispVEe6jL58QWlChbw"/>
        <org.eventb.core.guard name="_3NxoUcj8Ee6-Z9PCABxFkA" org.eventb.core.comment="Vérifie si n n'est pas divisible par current+1." org.eventb.core.generated="false" org.eventb.core.label="grd2" org.eventb.core.predicate="n mod (current+1) ≠ 0" org.eventb.emf.persistence.emf_id="_-BF6i8pVEe6jL58QWlChbw"/>
    </org.eventb.core.event>
    <org.eventb.core.invariant name="_plhKQMj5Ee6-Z9PCABxFkA" org.eventb.core.comment="Le résultat r est un booléen." org.eventb.core.generated="false" org.eventb.core.label="inv1" org.eventb.core.predicate="r ∈ BOOL" org.eventb.emf.persistence.emf_id="_-BF6c8pVEe6jL58QWlChbw"/>
    <org.eventb.core.invariant name="_plhxUMj5Ee6-Z9PCABxFkA" org.eventb.core.comment="current est un nombre naturel, que l'on parcourt." org.eventb.core.generated="false" org.eventb.core.label="inv2" org.eventb.core.predicate="current ∈ ℕ" org.eventb.emf.persistence.emf_id="_-BF6dMpVEe6jL58QWlChbw"/>
    <org.eventb.core.invariant name="_plhxUcj5Ee6-Z9PCABxFkA" org.eventb.core.comment="dd est une fonction associant à chaque nombre naturel un ensemble de nombres naturels." org.eventb.core.generated="false" org.eventb.core.label="inv3" org.eventb.core.predicate="dd ∈ ℕ → ℙ(ℕ)" org.eventb.emf.persistence.emf_id="_-BF6dcpVEe6jL58QWlChbw"/>
    <org.eventb.core.invariant name="_pliYYMj5Ee6-Z9PCABxFkA" org.eventb.core.comment="La fonction dd est en accord avec la suite de diviseurs d définie dans le contexte." org.eventb.core.generated="false" org.eventb.core.label="inv4" org.eventb.core.predicate="∀ iterator · iterator ∈ ℕ ∧ iterator ≤ current ⇒ dd(iterator) = d(iterator)" org.eventb.emf.persistence.emf_id="_-BF6dspVEe6jL58QWlChbw"/>
    <org.eventb.core.invariant name="_pliYYcj5Ee6-Z9PCABxFkA" org.eventb.core.comment="Le domaine de dd va de 0 à current." org.eventb.core.generated="false" org.eventb.core.label="inv5" org.eventb.core.predicate="dom(dd) = 0‥current" org.eventb.emf.persistence.emf_id="_-BF6d8pVEe6jL58QWlChbw"/>
    <org.eventb.core.invariant name="_pli_cMj5Ee6-Z9PCABxFkA" org.eventb.core.comment="Le domaine de dd est inclus dans l'ensemble des nombres jusqu'à n." org.eventb.core.generated="false" org.eventb.core.label="inv6" org.eventb.core.predicate="dom(dd) ⊆ 0‥n" org.eventb.emf.persistence.emf_id="_-BF6eMpVEe6jL58QWlChbw"/>
    <org.eventb.core.variable name="_ErzyMMjmEe6-Z9PCABxFkA" org.eventb.core.generated="false" org.eventb.core.identifier="r" org.eventb.emf.persistence.emf_id="_-BF6cMpVEe6jL58QWlChbw"/>
    <org.eventb.core.variable name="_plkNkMj5Ee6-Z9PCABxFkA" org.eventb.core.generated="false" org.eventb.core.identifier="dd" org.eventb.emf.persistence.emf_id="_-BF6ccpVEe6jL58QWlChbw"/>
    <org.eventb.core.variable name="_plkNkcj5Ee6-Z9PCABxFkA" org.eventb.core.comment="Définition des variables utilisées dans l'algorithme." org.eventb.core.generated="false" org.eventb.core.identifier="current" org.eventb.emf.persistence.emf_id="_-BF6cspVEe6jL58QWlChbw"/>
</org.eventb.core.machineFile>
